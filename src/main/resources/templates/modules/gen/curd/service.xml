<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/java/${packageName}/${moduleName}/service/${subModuleName}</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2015-2020 <a href="http://www.gt_plus.org/">Gt_Plus</a> All rights reserved.
 */
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gt_plus.modules.sys.entity.User;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.gt_plus.modules.sys.utils.UserUtils;

<#list table.importGridJavaList as i>
import ${i};
</#list>
import com.gt_plus.common.persistence.Page;
import com.gt_plus.common.service.CrudService;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao;
<#if table.isProcessDefinition?? && table.isProcessDefinition == "1">
import com.gt_plus.common.service.ActService;
import com.gt_plus.common.utils.StringUtils;
</#if>

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@Transactional(readOnly = true)
<#if table.isProcessDefinition?? && table.isProcessDefinition == "1">
public class ${ClassName}Service extends ActService<${ClassName}Dao, ${ClassName}> {
<#else>
public class ${ClassName}Service extends CrudService<${ClassName}Dao, ${ClassName}> {
</#if>
	<#if table.isProcessDefinition?? && table.isProcessDefinition == "1">
	private static final String PROCDEFKEY = "${table.processDefinitionKey}";
	</#if>
		
	public ${ClassName} get(String id) {
		return super.get(id);
	}
	
	public List<${ClassName}> findList(${ClassName} ${className}) {
		return super.findList(${className});
	}
	
	public Page<${ClassName}> findPage(Page<${ClassName}> page, ${ClassName} ${className}) {
		return super.findPage(page, ${className});
	}
	
	@Transactional(readOnly = false)
	public void save(${ClassName} ${className}) {
		super.save(${className});
	}
	
	@Transactional(readOnly = false)
	public void saveV(${ClassName} ${className}) {
		super.saveV(${className});
	}
	
	@Transactional(readOnly = false)
	public void delete(${ClassName} ${className}) {
		super.delete(${className});
		<#if table.isProcessDefinition?? && table.isProcessDefinition == "1">
		super.deleteAct(${className});
		</#if>
	}
	
	<#list table.columnList as c>
		<#-- 如果不是基类属性 -->
		<#if c.tableName?? && c.tableName!=''>
	public Page<${c.simpleJavaType}> findPageBy${c.simpleJavaField}(Page<${c.simpleJavaType}> page, ${c.simpleJavaType} ${c.simpleJavaField}) {
		${c.simpleJavaField}.setPage(page);
		page.setList(dao.findListBy${c.simpleJavaField}(${c.simpleJavaField}));
		return page;
	}
	</#if>
	</#list>
	
	<#if table.isProcessDefinition?? && table.isProcessDefinition == "1">
	@Transactional(readOnly = false)
	public void saveAct(${ClassName} ${className}) {
		Map<String, Object> vars = Maps.newHashMap();
		super.saveAct(${className}, "${functionNameSimple}", PROCDEFKEY, this.getClass().getName(), vars);
	}
	
	public LinkedHashMap<String, Object> getStartingUserList(${ClassName} ${className}){
		${className}.getAct().setProcDefKey(PROCDEFKEY);
		return super.getStartingUserList(${className});
	}
	
	public void setRuleArgs(${ClassName} ${className}){
			${className}.getAct().setProcDefKey(PROCDEFKEY);
			super.setRuleArgs(${className});
			
	}
	
	public LinkedHashMap<String, Object> getTargetUserList(${ClassName} ${className},String[] ids){
		
			if(ids ==null||ids.length<=0){
				if (StringUtils.isEmpty(${className}.getId()) ||
						StringUtils.isEmpty(${className}.getProcInsId())){
					${className}.getAct().setProcDefKey(PROCDEFKEY);
					return super.getStartingUserList(${className});
				} else{
					${className}.getAct().setProcDefKey(PROCDEFKEY);
					return super.getTargetUserList(${className});
				}
			}else{
				return super.getWebUserList(ids); 
			}
		}
	
	/**
	 * 通过待办、在办、已办、待发、已发读取相应的列表
	 * @param page
	 * @param ${className}
	 * @param path
	 * @return
	 */
	public Page<${ClassName}> findPage(Page<${ClassName}> page, ${ClassName} ${className}, String path) {
		if (super.isUnsent(path)) {
			${className}.setPage(page);
			${className}.getSqlMap().put("dsf", " AND a.create_by = '" + UserUtils.getUser().getId() + "' ");
			page.setList(dao.findListByProcIsNull(${className}));
		} else { 
			List<String> procInsIds = super.getProcInsIds(path, page);
			if (procInsIds.size() > 0) {
				${className}.setPage(page);
				page.setList(dao.findListByProc(${className}, procInsIds));
			} else {
				${className}.setPage(page);
				List<${ClassName}> list = Lists.newArrayList();
				page.setList(list);
			}
		}
		return page;
	}
	
	/**
	 * 设置工作流信息，打开Form表单时调用
	 * @param ${className}
	 */
	public void setAct(${ClassName} ${className}) {
		super.setAct(${className});
	}
	</#if>
	
}]]>
	</content>
</template>