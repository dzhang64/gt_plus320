<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2015-2020 <a href="http://www.gt_plus.org/">Gt_Plus</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.gt_plus.modules.bas.service.basmessage.BasMessageService;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.gt_plus.common.utils.MyBeanUtils;
import com.gt_plus.common.config.Global;
import com.gt_plus.common.json.AjaxJson;
import com.gt_plus.common.web.BaseController;
import com.gt_plus.common.utils.StringUtils;
import com.gt_plus.modules.sys.utils.DictUtils;
import com.gt_plus.modules.sys.utils.UserUtils;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
<#if table.ownerCodeExists>
import com.gt_plus.modules.sys.service.OfficeService;
</#if>

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	<#if table.ownerCodeExists>
	@Autowired
	private OfficeService officeService;
	</#if>
	
	@Autowired
	private BasMessageService basMessageService;
	
	//是否版本化数据
	private static boolean isAutoVersion = <#if table.isVersion?? && table.isVersion == "1">true<#else>false</#if>;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	/**
	 * ${functionNameSimple}列表页面
	 */
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className},  HttpServletRequest request, HttpServletResponse response, Model model) {
		<#if table.ownerCodeExists>
		if(!UserUtils.getUser().isAdmin()) model.addAttribute("ownerCode", officeService.get(UserUtils.getUser().getCompany()).getCode());
		</#if>
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * 查看，增加，编辑${functionNameSimple}表单页面
	 */
	@RequiresPermissions(value={"${permissionPrefix}:view","${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		if (${className}.getParent()!=null && StringUtils.isNotBlank(${className}.getParent().getId())){
			${className}.setParent(${className}Service.get(${className}.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(${className}.getId())){
				${ClassName} ${className}Child = new ${ClassName}();
				${className}Child.setParent(new ${ClassName}(${className}.getParent().getId()));
				List<${ClassName}> list = ${className}Service.findList(${className}); 
				if (list.size() > 0){
					${className}.setSort(list.get(list.size()-1).getSort());
					if (${className}.getSort() != null){
						${className}.setSort(${className}.getSort() + 30);
					}
				}
			}
		}
		if (${className}.getSort() == null){
			${className}.setSort(30);
		}
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * 保存${functionNameSimple}
	 */
	@ResponseBody
	@RequiresPermissions(value={"${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public AjaxJson save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes, String dirtyUpdateDate) throws Exception{
		<#list table.columnList as c>
			<#if c.magicLogic?? && (c.magicLogic == "audit")>
		${className}.set${c.simpleJavaField?cap_first}(this.buildAudits(${className}.getPreAudits(), ${className}.get${c.simpleJavaField?cap_first}(), ${className}.getPreStatus(), ${className}.getStatus(), UserUtils.getUser().getRoleEnNames()));
			<#break/>
			</#if>
		</#list>
		AjaxJson j = new AjaxJson();
		/*
		if (!beanValidator(model, ${className})){
			j.setSuccess(false);
			j.setMsg(DictUtils.getDictLabel("非法参数", "msg_bas", "非法参数！"));
			return j;
		}
		*/
		if(!${className}.getIsNewRecord()){
			//修改保存
			${ClassName} t = ${className}Service.get(${className}.getId());
			if(!t.getUpdateDate().toString().equals(dirtyUpdateDate)) 
			{
				//保存前记录被其他人修改
				j.setSuccess(false);
				j.setMsg(DictUtils.getDictLabel("记录已经被修改", "msg_bas", "记录已经被修改"));
				return j;
			} else {
				//保存历史版本
				if(isAutoVersion) ${className}Service.saveV(t);   
				//将编辑表单中的非NULL值覆盖数据库记录中的值 
				MyBeanUtils.copyBeanNotNull2Bean(${className}, t);
				${className}Service.save(t);
			}
		}else{
			//新建保存
			<#if table.ownerCodeExists>
			${className}.setOwnerCode(officeService.get(UserUtils.getUser().getCompany().getId()).getCode());
			</#if>
			${className}Service.save(${className});
		}
		j.setSuccess(true);
		j.put("${className}", ${className});
		j.setMsg(DictUtils.getDictLabel("保存?信息成功", "msg_bas", "保存${functionNameSimple}信息成功","${functionNameSimple}"));
		//保存成功后处理逻辑
		this.afterSave("${functionNameSimple}", ${className});
		return j;
	}
	
	@ResponseBody
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = "getChildren")
	public List<${ClassName}> getChildren(String parentId){
		if("-1".equals(parentId)){//如果是-1，没指定任何父节点，就从根节点开始查找
			parentId = "0";
		}
		return ${className}Service.getChildren(parentId);
	}
	
	/**
	 * 删除${functionNameSimple}
	 */
	@ResponseBody
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "delete")
	public AjaxJson delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		AjaxJson j = new AjaxJson();
		//保存历史版本
		if(isAutoVersion) {
			${className}.setDelFlag(Global.YES);
			${className}Service.saveV(${className}); 
		}
		${className}Service.delete(${className});
		j.setMsg(DictUtils.getDictLabel("删除?信息成功", "msg_bas", "删除${functionNameSimple}信息成功","${functionNameSimple}"));
		return j;
	}
	
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<${ClassName}> list = ${className}Service.findList(new ${ClassName}());
		for (int i=0; i<list.size(); i++){
			${ClassName} e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData2")
	public List<Map<String, Object>> treeData2(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<${ClassName}> list = ${className}Service.findList(new ${ClassName}());
		for (int i=0; i<list.size(); i++){
			${ClassName} e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("text", e.getName());
				if(StringUtils.isBlank(e.getParentId()) || "0".equals(e.getParentId())){
					map.put("parent", "#");
					Map<String, Object> state = Maps.newHashMap();
					state.put("opened", true);
					map.put("state", state);
				}else{
					map.put("parent", e.getParentId());
				}
				mapList.add(map);
			}
		}
		return mapList;
	}
	
	/**
	 * 创建数据范围
	 */
	private String getDataScope() {
		StringBuilder sqlString = new StringBuilder();
		<#if table.extJavaMap?? && table.extJavaMap["controller-getdatascope"]??>
		${table.extJavaMap["controller-getdatascope"]}
		</#if>
		return sqlString.toString();
	}
	
	/**
	 * 保存成功后处理逻辑
	 */
	private void afterSave(String title, ${ClassName} ${className}) {
		Map<String, String> roleMap = new HashMap<String, String>();
		String subSystemCode = "wz";
		//roleMap.put("role_enname", "/${urlPrefix}");
		//subSystemCode = "子系统或者模块标识，例如wz_sec，表示安保";
		<#if table.extJavaMap?? && table.extJavaMap["controller-aftersave"]??>
		${table.extJavaMap["controller-aftersave"]}
		</#if>
		<#if table.ownerCodeExists>
		if(roleMap.size() > 0) basMessageService.saveMessage(subSystemCode, title, ${className}.getOwnerCode(), roleMap);
		</#if>
	}
}]]>
	</content>
</template>